#!/usr/bin/perl
package MT::Tool::RepairDB;
use strict;
use warnings;
use File::Spec;
use FindBin;
use lib map File::Spec->catdir( $FindBin::Bin, File::Spec->updir, $_ ), qw/lib extlib/;
use base qw( MT::Tool );

sub usage { '--debug 1' }

sub help {
    return q {
        Repair database inconsistencies.

        --debug 1
    };
}

my ( $debug );

sub options {
    return (
        'debug=s'   => \$debug,
    );
}

sub main {
    my $class = shift;
    my ( $verbose ) = $class->SUPER::main( @_ );
    require MT::Blog;
    require MT::Category;
    my $inconsistencies;
    my @blog_ids;
    my $terms;
    my $blog_terms;
    my $blog_iter = MT->model( 'blog' )->load_iter();
    my $inconsistencies_blog;
    while ( my $blog = $blog_iter->() ) {
        next if $blog->class eq 'website';
        if (! $blog->website ) {
            next unless $blog->parent_id;
            my $website = MT->model( 'website' )->load( $blog->parent_id );
            if (! $website ) {
                $inconsistencies_blog = 1;
                push( @blog_ids, $blog->id );
            }
        }
    }
    if ( $inconsistencies_blog ) {
        $blog_terms->{ id } = \@blog_ids;
        $terms->{ blog_id } = \@blog_ids;
        my @blogs = MT->model( 'blog' )->load( $blog_terms );
        for my $blog ( @blogs ) {
            if (! $blog->website ) {
                my $website = MT->model( 'website' )->load( $blog->parent_id );
                if (! $website ) {
                    $inconsistencies = 1;
                    my $site_path = $blog->site_path;
                    # TODO::Remove Files.
                    if ( $debug ) {
                        print 'Blog has no website(id:' . $blog->id . ")\n";
                    } else {
                        $blog->remove or die $blog->errstr;
                    }
                    if (! $debug ) {
                        my $scope = 'blog:' . $blog->id;
                        my @plugindata = MT->model( 'plugindata' )->load( { key => { like => $scope } } );
                        for my $data ( @plugindata ) {
                            $data->remove or die $data->errstr;
                        }
                    }
                }
            }
        }
    }
    my @models = __models();
    if ( $inconsistencies_blog ) {
        for my $model( @models ) {
            if ( my $class = MT->model( $model ) ) {
                if ( $class->has_column( 'blog_id' ) ) {
                    my @objects = $class->load( $terms );
                    for my $object ( @objects ) {
                        next unless $object;
                        my $obj_blog = MT::Blog->load( $object->blog_id );
                        if (! $obj_blog ) {
                            $inconsistencies = 1;
                            if ( $debug ) {
                                print 'Blog not found(id:' . $object->blog_id . ")\n";
                            } else {
                                $object->remove or die $object->errstr;
                            }
                        }
                    }
                }
            }
        }
    }
    for my $model( @models ) {
        if ( my $class = MT->model( $model ) ) {
            if ( $class->has_column( 'blog_id' ) ) {
                my $object_iter = $class->load_iter();
                my @objects;
                while ( my $object = $object_iter->() ) {
                    if ( my $blog_id = $object->blog_id ) {
                        my $blog = MT::Blog->load( $blog_id );
                        if (! $blog ) {
                            $inconsistencies = 1;
                            push( @objects, $object );
                            if ( $debug ) {
                                print 'Blog not found(id:' . $blog_id . ")\n";
                            }
                        }
                    }
                }
                if (! $debug ) {
                    for my $obj( @objects ) {
                        $obj->remove or die $obj->errstr;
                    }
                }
            }
        }
    }
    my $placement_iter = MT->model( 'placement' )->load_iter();
    my @placement_ids;
    while ( my $placement = $placement_iter->() ) {
        my $entry = MT->model( 'entry' )->load( $placement->entry_id );
        my $category = MT->model( 'category' )->load( $placement->category_id );
        if ( (! $entry ) || (! $category ) ) {
            push( @placement_ids, $placement->id );
        }
    }
    if ( @placement_ids ) {
        my @placement = MT->model( 'placement' )->load( { id => \@placement_ids } );
        for my $place ( @placement ) {
            $inconsistencies = 1;
            if ( $debug ) {
                print 'Placement has no entry or category(id:' . $place->id . ")\n";
            } else {
                $place->remove or die $place->errstr;
            }
        }
    }
    my $category_iter = MT->model( 'category' )->load_iter( { class => [ 'category', 'folder' ],
                                                               parent => { not => 0 }  } );
    my @category_ids;
    while ( my $category = $category_iter->() ) {
        if ( $category->parent ) {
            my $parent = MT->model( 'category' )->load( { parent => $category->parent } );
            if (! $parent ) {
                push( @category_ids, $category->id );
            }
        }
    }
    if ( @category_ids ) {
        my @categories = MT->model( 'category' )->load( { id => \@category_ids,
                                                          class => [ 'category', 'folder' ] } );
        for my $category ( @categories ) {
            if ( $category->parent ) {
                my $parent = MT::Category->load( { id => $category->parent, class => $category->class } );
                if (! $parent ) {
                    $inconsistencies = 1;
                    if ( $debug ) {
                        print 'Category(Folder) has no parent(id:' . $category->id . ")\n";
                    } else {
                        $category->remove or die $category->errstr;
                    }
                }
            }
        }
    }
    my @template_map_ids;
    my $template_map_iter = MT->model( 'templatemap' )->load_iter();
    while ( my $template_map = $template_map_iter->() ) {
        my $parent = MT->model( 'template' )->load( $template_map->template_id );
        if (! $parent ) {
            push( @template_map_ids, $template_map->id );
        }
    }
    if ( @template_map_ids ) {
        my @templatemaps = MT->model( 'templatemap' )->load( { id => \@template_map_ids } );
        for my $map ( @templatemaps ) {
            $inconsistencies = 1;
            if ( $debug ) {
                print 'TemplateMap has no parent(id:' . $map->id . ")\n";
            } else {
                $map->remove or die $map->errstr;
            }
        }
    }
    my @fileinfo_ids;
    my $fileinfo_iter = MT->model( 'fileinfo' )->load_iter( { entry_id => { not_null => 1 } } );
    while ( my $fileinfo = $fileinfo_iter->() ) {
        my $entry = MT->model( 'entry' )->load( { id => $fileinfo->entry_id,
                                                  status => { not => 2 },
                                                  class => '*' } );
        if ( $entry ) {
            push( @fileinfo_ids, $fileinfo->id );
        }
    }
    if ( @fileinfo_ids ) {
        my @fileinfos = MT->model( 'fileinfo' )->load( { id => \@fileinfo_ids } );
        for my $fileinfo ( @fileinfos ) {
            if ( $fileinfo->entry_id < 0 ) {
                next;
            }
            $inconsistencies = 1;
            if ( $debug ) {
                print 'Fileinfo has entry, entry is not published (id:' . $fileinfo->id . ")\n";
            } else {
                $fileinfo->remove or die $fileinfo->errstr;
            }
        }
    }
    if ( $debug ) {
        if (! $inconsistencies ) {
            print "No database inconsistencies.\n";
        }
    }
    1;
}

sub __models {
    my @matches; my $model = MT->registry( 'object_types' );
    for my $m ( keys %$model ) { if ( $m !~ /\Q.\E/ ) { push @matches, $m; } }
    return @matches;
}

__PACKAGE__->main() unless caller;
